// Package storage provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package storage

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "storage/api/storage/common"
	externalRef1 "storage/api/storage/storage"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// FilesListParams defines parameters for FilesList.
type FilesListParams struct {
	// Auth token from Query
	AuthToken *externalRef0.AuthTokenInQuery `form:"authToken,omitempty" json:"authToken,omitempty"`
}

// UploadParams defines parameters for Upload.
type UploadParams struct {
	// Auth token from Query
	AuthToken *externalRef0.AuthTokenInQuery `form:"authToken,omitempty" json:"authToken,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/1/download/{uid})
	Download(c *gin.Context, uid externalRef1.Uid)

	// (GET /api/1/files/list)
	FilesList(c *gin.Context, params FilesListParams)

	// (POST /api/1/upload)
	Upload(c *gin.Context, params UploadParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// Download operation middleware
func (siw *ServerInterfaceWrapper) Download(c *gin.Context) {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid externalRef1.Uid

	err = runtime.BindStyledParameter("simple", false, "uid", c.Param("uid"), &uid)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter uid: %s", err)})
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Download(c, uid)
}

// FilesList operation middleware
func (siw *ServerInterfaceWrapper) FilesList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FilesListParams

	// ------------- Optional query parameter "authToken" -------------
	if paramValue := c.Query("authToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "authToken", c.Request.URL.Query(), &params.AuthToken)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter authToken: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FilesList(c, params)
}

// Upload operation middleware
func (siw *ServerInterfaceWrapper) Upload(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadParams

	// ------------- Optional query parameter "authToken" -------------
	if paramValue := c.Query("authToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "authToken", c.Request.URL.Query(), &params.AuthToken)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter authToken: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.Upload(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/api/1/download/:uid", wrapper.Download)

	router.GET(options.BaseURL+"/api/1/files/list", wrapper.FilesList)

	router.POST(options.BaseURL+"/api/1/upload", wrapper.Upload)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXT2/bthv+KgR/v6Mq2e0GbLo1Gwpk2LA/SbFDlwNj07Ywi9RIKYUXCIiTZV2xAUWH",
	"ATtuO+yuuFWtOrbzFV5+hX2S4aXkf3HcdUg27NCLDVLkw+cln+cRdUgbMoyk4CLW1D+kmjcSFcS9nUaH",
	"h9x2bXGmuLqbxB1s7dvWPalCFlOffvD5LnWotqOpXz2lDo17EbY7cRzRNE0dGoiWxPlNrhsqiOJACurT",
	"nVgq1uZEc3UQNDhpSUXeY6otEYKrUH/c2ikfVWC+5+mHrN3myg2kZ4d4ODaIuzhEl3jUoQdc6XKNult3",
	"6zR1qIy4YFFAfXrHrbk16tCIxR1bo8eiwKt7TflQdCVreodJ0EzX6cJvMILMPIICBpBBbo6J+QYyeAnn",
	"xPSJ6UNujmBgfzMCZ5DDkMCFOYJp1TuCgkAGA3MMU3MEBQwhM99CAYX7haAObfMYl5URVwwX3W5Sn75f",
	"0aIOVVxHUujyZG7Xavj3f8Vb1KeuV1Xv2eNgbo+F3f95i/P15pPnheK2vHUJpSHDUIrXAOFKSbXFmp/x",
	"rxKu4xKrfg2s+4IlcUeq4GteMrv97jXQdqX8iIlexU4j4NvXKnVbxFwJ1qWo55lRqP9g1SIPKN1L9xwa",
	"s7bG1kySeynqTbGQx1xpO+21D24xz0uCJkV4nYQhU711UU6ggHwuS8jWhYk7UQm+FXS59rqBjq8Q+48w",
	"hSEMcIp5XMkdJpDBGWqXwHO72sR8b06xcW6eEGQCL+A5TOEZTAlcwBTOzQ8wtAbIzDHk2DZ9GFVDFkQd",
	"gmaAZ+bInMALyBF7hjOBjOzcuWVOkYwt8RwK8xjyzaa5h6V9iJXdmGtac8g3tvkv2OYveCy5BjdoV37J",
	"xbb4NOGqd9lCv1idnphHVnbWQH24gMIKNVuIdAqDmdStlkfmBFVYinQ11qeVGyev9sKTJTcmkc3kdSf+",
	"vOSLS68da41lf980P5dcHQRT8x0UcIZLOARy00dLbnQ88sw3UHAJ/AoZDGFc8h+uVgvjtagg2DOLgvLQ",
	"yB9HPxEYQwYj04cCxuYExqReq2EnbgDGVgYvcXkYYFG4a+WZZ3jeJ/bEc3OK8GVSTszTstJj23GMUbpI",
	"PRhjvZsia5lsNazUU0FsoJmnMCaopjNber4Sp+Vd4B+SfST1FXF5P5rfMKzxt2Sz9zdjcjYv4Hom5fTG",
	"sncB+CZ4/7XgXUrIRQQNVyMxuyKC5u9pm6aYcZaBOphpeTXf7n6yTaQgOmbtQLQJFweBkiLkAt/diepW",
	"d3+Nl/+SndvAjwR3/5biuuOqhKbOBtCubLAuCURLsY1g1deHdu3gjrTaeCVek+8n7RU83/Pms/13arUa",
	"XdrUtUD//fI9hjpUsHD5EybdS/8MAAD//zXcneCdDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./common/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	for rawPath, rawFunc := range externalRef1.PathToRawSpec(path.Join(pathPrefix, "./storage/schema.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
